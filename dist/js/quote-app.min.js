"use strict";var Background=function(){function n(){a.$background=$("#background")}function t(){e("https://source.unsplash.com/category/nature/1920x1080").then(o)}function e(n){return $.Deferred(function(t){var e=new Image;e.onload=function(){t.resolve(e)},e.onerror=function(){t.reject()},e.src=n}).promise()}function o(n){a.$background.append(n).css("opacity",1)}function r(){n(),t()}var a={};return{init:r}}(),Greeting=function(){function n(){r.$greeting=$("#greeting")}function t(){var n=new Date,t=n.getHours();return"Good "+(t<12?"morning":t>=12&&t<17?"afternoon":"evening")+", "+i+"."}function e(){r.$greeting.text(t())}function o(){n()}var r={},a=["handsome","smarty-pants","good looking","classy","sport","Mr Roboto"],i=function(){var n=Math.floor(Math.random()*a.length);return a[n]}();return{init:o,displayMessage:e}}(),Quote=function(){function n(){a.$quoteFeature=$("#quote"),a.$quoteLink=$(document.createElement("a")),a.$author=$(document.createElement("p"))}function t(){var n={endpoint:"https://quotesondesign.com/wp-json/posts",params:{"filter[orderby]":"rand","filter[posts_per_page]":1,cachingHack:(new Date).getTime()}};$.getJSON(n.endpoint,n.params).then(o).catch(e)}function e(n){console.log(n)}function o(n){Greeting.displayMessage(),a.$quoteLink.attr("target","_blank").attr("href",n[0].link).html(n[0].content),a.$author.html(n[0].title),a.$quoteFeature.css("background-color","rgba(0, 0, 0, .2").attr("href",n[0].link).attr("target","_blank").html(a.$quoteLink).append(a.$author)}function r(){n(),t()}var a={};return{init:r}}();$(document).ready(function(){Background.init(),Greeting.init(),Quote.init()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
